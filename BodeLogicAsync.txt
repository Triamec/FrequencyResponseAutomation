public void BodeLogicAsync() {
			// Does not contain any asserts, but ensures the principal bode acquirement mechanism is tested

			const string negativeSign = "^";
			const string decimalSeparator = "°";
			const string listSeparator = "¨";

			#region Setup special culture
			var culture = new CultureInfo(CultureInfo.InvariantCulture.LCID, false);

			// make the current culture somewhat disturbed
			culture.NumberFormat.NumberDecimalSeparator = decimalSeparator;
			culture.NumberFormat.NegativeSign = negativeSign;
			culture.TextInfo.ListSeparator = listSeparator;

			Thread thread = Thread.CurrentThread;
			CultureInfo backupCulture = thread.CurrentCulture;
			thread.CurrentCulture = culture;
			#endregion Setup special culture

			try {

				BodeAxis axis = SetupBodeAxis();

				var signal = new AutoResetEvent(initialState: false);

				Func<AutoResetEvent, IBodeAxis, CultureInfo, ILog, IBodeLogic> worker = StartBode;
				IAsyncResult asyncResult = worker.BeginInvoke(signal, axis, culture, Log, null, null);
				try {
					var wait = new TimeSpan(0, 0, 3, 0, 0);
					if (!signal.WaitOne(wait, false)) {
						Assert.Fail(string.Format("The test duration exceeded {0} minutes", wait.TotalMinutes));
					}
				} finally {
					IBodeLogic logic = worker.EndInvoke(asyncResult);
					logic.GetBodeSpectrumCancel();
					logic.Dispose();
					axis.Tidy();
					string signalsFile = _callback.SignalsFile;
					string resultFile = _callback.ResultFile;
					_callback.Dispose();

					#region Test culture properties  of written files
					using (TextReader reader = new StreamReader(signalsFile)) {
						string fileContent = reader.ReadToEnd();
						Assert.That(fileContent, Contains.Substring(listSeparator));
						Assert.That(fileContent, Contains.Substring(decimalSeparator));
						Assert.That(fileContent, Contains.Substring(negativeSign));
					}

					using (TextReader reader = new StreamReader(resultFile)) {
						string fileContent = reader.ReadToEnd();
						Assert.That(fileContent, Is.Not.Contains(listSeparator));
						Assert.That(fileContent, Is.Not.Contains(decimalSeparator));
						Assert.That(fileContent, Is.Not.Contains(negativeSign));
					}
					#endregion Test culture properties of written files
				}
			} finally {
				thread.CurrentCulture = backupCulture;

				// save space in report dirs.
				if (File.Exists(_callback.SignalsFile)) File.Delete(_callback.SignalsFile);
				if (File.Exists(_callback.ResultFile)) File.Delete(_callback.ResultFile);
			}
		}
		#endregion BodeLogic tests


		BodeAxis SetupBodeAxis() =>

			// open loop
			new BodeAxis(Axis) {
				MeasurementMethod = BodeConfig.Read().MeasurementMethods[0]
			};
		#endregion SetupBodeAxis

		#region BodeLogic helpers
		/// <summary>
		/// Create the bode logic on another thread than the thread who will wait for completion
		/// </summary>
		/// <param name="signal">The signal where completion will be signaled.</param>
		/// <param name="axis">The axis.</param>
		/// <param name="formatProvider">The format provider.</param>
		/// <param name="log">The log.</param>
		/// <returns>
		/// The created resource that must be managed by the caller.
		/// </returns>
		IBodeLogic StartBode(AutoResetEvent signal, IBodeAxis axis, CultureInfo formatProvider, ILog log) {
			IBodeLogic logic = new BodeLogic();
			var parameters = new BodeParameters(3) {
				FrequencyRange = new NIRange(10, 10000),
				FrequencySteps = 10,
				Spacing = FrequencySpacing.Logarithmic,
				SettlingTime = TimeSpan.FromSeconds(0.2)
			};
			parameters.SetMeasuringPointMaximum(0, 10);
			parameters.SetMeasuringPointMaximum(1, 0.8);
			parameters.SetMeasuringPointMaximum(2, 10);

			_callback = new BodeLogicCallback(logic, signal, this, formatProvider, log);

			logic.GetBodeSpectrumAsync(axis, parameters);
			return logic;
		}